#include "common.h"
#include "sload.h"

uniform float4 m_affects;

f_deffer main(p_flat I)
{
    //Искажение экрана при выбросе
    float problems = cos((frac(timers.z * 4) - 0.5) * 3.1416) * 2 - 0.8;
    float AMPL = 0.3;
    I.tcdh.y -= (m_affects.x > 0.15 && I.tcdh.x > problems - AMPL && I.tcdh.x < problems + AMPL) ?
        cos(4.71 * (I.tcdh.x - problems) / AMPL) * sin(frac(timers.z) * 6.2831 * 90) * (m_affects.x / 10) * (AMPL - abs(I.tcdh.x - problems)) / AMPL :
        0;

    // diffuse
    float3 D = s_base.Sample(smp_base, I.tcdh); // IN:  rgb.a

#ifdef USE_TDETAIL
    D.rgb = 2 * D.rgb * s_detail.Sample(smp_base, I.tcdbump).rgb;
#endif

    // hemi,sun,material
    float ms = xmaterial;
#ifdef USE_LM_HEMI
    float4 lm = s_hemi.Sample(smp_rtlinear, I.lmh);
    float h = get_hemi(lm);
#ifdef USE_R2_STATIC_SUN
    ms = get_sun(lm);
#endif
#else
    float h = I.position.w;
#ifdef USE_R2_STATIC_SUN
    ms = I.tcdh.w;
#endif
#endif

    //отключение экрана
    D.rgb = (m_affects.x > 0.41) ? 0 : D.rgb;

    float4 Ne = float4(normalize((float3)I.N.xyz), h);

    return pack_gbuffer(Ne, float4(I.position.xyz + Ne.xyz * def_virtualh / 2.h, ms), float4(D.rgb, def_gloss), float4(0.f, 0.f, 0.f, 0.f));
}

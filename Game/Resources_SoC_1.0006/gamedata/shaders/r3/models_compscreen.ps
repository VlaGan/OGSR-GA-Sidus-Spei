#include "common.h"
#include "sload.h"

uniform float4 m_affects;

float get_noise(float2 co) { return (frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5453)) * 0.5; }

f_deffer main(p_flat I)
{
    // diffuse
    float3 D = s_base.Sample(smp_base, I.tcdh); // IN:  rgb.a

#ifdef USE_TDETAIL
    D.rgb = 2 * D.rgb * s_detail.Sample(smp_base, I.tcdbump).rgb;
#endif

    // hemi,sun,material
    float ms = xmaterial;
#ifdef USE_LM_HEMI
    float4 lm = s_hemi.Sample(smp_rtlinear, I.lmh);
    float h = get_hemi(lm);
#ifdef USE_R2_STATIC_SUN
    ms = get_sun(lm);
#endif
#else
    float h = I.position.w;
#ifdef USE_R2_STATIC_SUN
    ms = I.tcdh.w;
#endif
#endif

    // Шум при выбросе
    float noise = get_noise(I.tcdh * timers.z) * m_affects.x * m_affects.x * 30;
    D.r += noise + 0.1;
    D.g += noise + 0.1;
    D.b += noise + 0.1;

    float4 Ne = float4(normalize((float3)I.N.xyz), h);

    return pack_gbuffer(Ne, float4(I.position.xyz + Ne.xyz * def_virtualh / 2.h, ms), float4(D.rgb, def_gloss), float4(0.f, 0.f, 0.f, 0.f));
}

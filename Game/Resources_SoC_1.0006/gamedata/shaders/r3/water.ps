#include "common.h"

#include "reflections.h"

// uniform float4 ogsr_game_time; // hour, min, sec, ms
// static const float REFLS_DISABLE_TIME_START = ( 20 * 60 ) + 30; //20:30
// static const float REFLS_DISABLE_TIME_STOP  = ( 4 * 60 ); //04:00

struct vf
{
    float2 tbase : TEXCOORD0; // base
    float4 tnorm0 : TEXCOORD1; // nm0
    float4 position_w : TEXCOORD2; // nm1
    float3 M1 : TEXCOORD3;
    float3 M2 : TEXCOORD4;
    float3 M3 : TEXCOORD5;
    float3 v2point_w : TEXCOORD6;
#ifdef USE_SOFT_WATER
#ifdef NEED_SOFT_WATER
    float4 tctexgen : TEXCOORD7;
#endif
#endif
    float4 c0 : COLOR0; // .w - tonemap scale
    float4 c1 : COLOR1;
    float fog : FOG;
    float4 hpos : SV_Position;
};

Texture2D s_nmap;
Texture2D s_leaves;

#if defined(USE_SOFT_WATER) && defined(NEED_SOFT_WATER)
float3 water_intensity;
#endif

#ifdef GBUFFER_OPTIMIZATION
float4 main(vf I, float4 pos2d : SV_Position) : SV_Target
#else
float4 main(vf I) : SV_Target
#endif
{
    float4 base = s_base.Sample(smp_base, I.tbase);

    float3 n0 = s_nmap.Sample(smp_base, I.tnorm0.xy);
    float3 n1 = s_nmap.Sample(smp_base, I.tnorm0.zw);
    float3 Navg = n0 + n1 - 1;

    float lmap = pow(saturate(I.c0.x * 4), 25);

#ifdef USE_SOFT_WATER
#ifdef NEED_SOFT_WATER
    float2 PosTc = I.tctexgen.xy / I.tctexgen.z;
#ifdef GBUFFER_OPTIMIZATION
    gbuffer_data gbd = gbuffer_load_data(PosTc, pos2d);
#else
    gbuffer_data gbd = gbuffer_load_data(PosTc);
#endif
    float3 _P = gbd.P;

#ifdef NEED_SPLASHES
    if (rain_params.x > 0)
    {
        float3 splashes = calc_rain_splashes(I.tbase * 0.5f);
        float clearing_pos = smoothstep(5.h, 20.h, length(_P.xyz));
        float fade = (1.h - saturate(clearing_pos * clearing_pos));
        Navg += splashes * fade * lmap * 1.75f * rain_params.x;
    }
#endif

#endif // USE_SOFT_WATER
#endif // NEED_SOFT_WATER

    float3 Nw = mul(float3x3(I.M1, I.M2, I.M3), Navg);
    Nw = normalize(Nw);
    float3 v2point = normalize(I.v2point_w);

    float3 vreflect = reflect(normalize(v2point), normalize(Nw.xyz));

    float fresnel = saturate(dot(vreflect, v2point));
    float power = pow(fresnel, 9);

    float3 env = calc_envmap(vreflect);
    float3 c_reflection = env;

#ifdef NEED_MOONROAD
    const float sun_light_vibrance = 0.35f;
    float3 sun_light = L_sun_color.rgb;
    sun_light = lerp(sun_light, dot(sun_light, 0.33f), sun_light_vibrance);

    float3 half_vec = normalize(v2point + L_sun_dir_w);
    float specular = pow(abs(dot(half_vec, Nw)), 64.0f);
    c_reflection *= 1.h + specular * 4.0f * sun_light * lmap;
#endif

    float4 refl = compute_ssr(I.position_w.xyz, Nw.xyz);
    refl.xyz *= 1.6;
    c_reflection = lerp(c_reflection, refl.xyz, refl.www);

    float3 final = lerp(c_reflection, base.rgb, base.a);
    final *= dot(I.c1.xyz, 0.33f) * 2.f;

#ifdef NEED_SOFT_WATER
    float alpha = 0.55h + 0.25h * power; // 1=full env, 0=no env
#ifdef USE_SOFT_WATER
    //	Igor: additional depth test
    float waterDepth = _P.z - I.tctexgen.z;

    //	water fog
    const float fog_exp_intens = -4.0h;
    float fog = 1 - exp(fog_exp_intens * waterDepth);
    float3 Fc = float3(0.1h, 0.1h, 0.1h) * water_intensity.r;
    final = lerp(Fc, final, alpha);

    alpha = min(alpha, saturate(waterDepth));

    alpha = max(fog, alpha);

    //	Leaves
    float4 leaves = s_leaves.Sample(smp_base, I.tbase);
    leaves.rgb *= water_intensity.r;
    float calc_cos = -dot(float3(I.M1.z, I.M2.z, I.M3.z), normalize(v2point));
    float calc_depth = saturate(waterDepth * calc_cos);
    float fLeavesFactor = smoothstep(0.025, 0.05, calc_depth);
    fLeavesFactor *= smoothstep(0.1, 0.075, calc_depth);
    final = lerp(final, leaves, leaves.a * fLeavesFactor);
    alpha = lerp(alpha, leaves.a, leaves.a * fLeavesFactor);

#endif //	USE_SOFT_WATER

    //	Fogging
    final = lerp(fog_color, final, I.fog);
    alpha *= I.fog * I.fog;

    return float4(final, alpha);

#else //	NEED_SOFT_WATER

    final = lerp(fog_color, final, I.fog);
    return float4(final, I.fog * I.fog);

#endif //	NEED_SOFT_WATER
}
